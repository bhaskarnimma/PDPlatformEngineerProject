---
AWSTemplateFormatVersion: "2010-09-09"

Description:
  Creates the Lambda functions, DynamoDB table, and API Gateway endpoints for the web application workshop

Parameters:
      AccountId:
         Description: "Name of the AccountId to use"
         Type: "String"

      Region:
         Description: "Region Name To Use"
         Type: "String"
      SNSTopicName:
         Description: "SNS Topic Name To Use"
         Type: "String"
       
Resources:
  EmailSubscriptionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: EmailSubscriptions
      AttributeDefinitions:
        -
          AttributeName: email
          AttributeType: S
      KeySchema:
        -
          AttributeName: email
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: newsletterwebsite
      WebsiteConfiguration:
        IndexDocument: 'index.html'
  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
        - Action:
          - 's3:GetObject'
          Effect: Allow
          Resource:
          - !Sub 'arn:aws:s3:::${S3Bucket}/*'
          Principal: '*'       
        
  NewsLetterSNS:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: NewsLetterSNS
      TopicName: { "Ref": "SNSTopicName" }
      
  NewsletterExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: NewsletterLambdaRole
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

      Policies:
        -
          PolicyName: NewsLetterSubscriptionPolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action: "*"
                Resource: "*"
             
     
  NewsLetterSubscriptionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: NewsLetterSubscriptionFunction
      Runtime: nodejs6.10
      Role: !GetAtt NewsletterExecutionRole.Arn
      Timeout: 5
      MemorySize: 128
      Handler: index.handler
      Code:
        ZipFile: >
            const aws = require('aws-sdk');
            var db = new aws.DynamoDB();
            var sns = new aws.SNS();

            const RESPONSE = {
              OK : {
                status : 200,
                message: "You have successfully subscribed to the newsletter!",
              },
              DUPLICATE : {
                status : 400,
                message : "You are already subscribed."
              },
              ERROR : {
                status : 400,
                message: "Something went wrong. Please try again."
              }
            };
            
            var model = {
                email: {"S" : ""},
            };

            exports.handler = (event, context, callback) => {
                
                var email = event.body.email;
                
                if(!email){
                    return callback(null, RESPONSE.ERROR);
                }
                
                
                model.email.S = email;
                

                db.putItem({
                    TableName: 'EmailSubscriptions',
                    Item: model,
                    Expected: {
                        email: { Exists: false }
                    }
                }, function (err, data) {
                    if (err) {
                        
                        return callback(null, RESPONSE.DUPLICATE);
                    }
                    
                    var params = {
                      Protocol: 'email', 
                      TopicArn: 'arn:aws:sns:${AWS:Region}:${AWS::AccountId}:${AWS:SNSTopicName}',
                      Endpoint: email
                    };

                    sns.subscribe(params, function(err, data) {
                      if (err) console.log(err, err.stack); 
                      else     {
                          console.log("succesfully");
                          console.log(data); 
                      }          
                    });
                    
                    callback(null, RESPONSE.OK);
                });
            };

  NewsLetterSubscriptionFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref NewsLetterSubscriptionFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref NewsletterApi
            - "/*"

  NewsletterUnsubscribeFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: NewsletterUnsubscribeFunction
      Runtime: nodejs6.10
      Role: !GetAtt NewsletterExecutionRole.Arn
      Timeout: 5
      MemorySize: 128
      Handler: index.handler
      Code:
        ZipFile: >
            'use strict';

            const aws = require('aws-sdk'); 
            const sns = new aws.SNS();
            const dynamoDb = new aws.DynamoDB.DocumentClient();

            const RESPONSE = {
              OK : {
                status : 200,
                message: "You have successfully unsubscribed to the newsletter!",
              },
              NOT_FOUND : {
                status : 400,
                message : "email not suscribed for newsletter."
              },
              ERROR : {
                status : 400,
                message: "Something went wrong. Please try again."
              }
            };


            module.exports.handler = (event, context, callback) => {
              
               var email = event.body.email;
                
                if(!email){
                    return callback(null, RESPONSE.ERROR);
                }
              
              const params = {
                TableName: "EmailSubscriptions",
                Key: {
                  email: email,
                },
              };

              var unsubscribe_params = {
                TopicArn: 'arn:aws:sns:${AWS:Region}:${AWS::AccountId}:${AWS:SNSTopicName}', 
              };
              
              sns.listSubscriptionsByTopic(unsubscribe_params, function(err, data) {
                if (err) console.log(err, err.stack); 
                else  {   
                  
                  var unSubscribeEmail = {};
                  for (var i in data.Subscriptions) {
                    var subscriber = data.Subscriptions[i];
                    if(subscriber.Endpoint == email){
                      unSubscribeEmail = subscriber;
                      break;
                    }
                    
                  }
                 
                  console.log(unSubscribeEmail);
                  
                  if(unSubscribeEmail && unSubscribeEmail.SubscriptionArn && unSubscribeEmail.SubscriptionArn != 'PendingConfirmation'){
                    sns.unsubscribe({SubscriptionArn : unSubscribeEmail.SubscriptionArn }, function(err, data) {
                      if (err) console.log(err, err.stack); 
                      else {
                         
                        dynamoDb.delete(params, (error) => {
                          
                          if (error) {
                            return callback(null, RESPONSE.NOT_FOUND);
                          }
                      
                           callback(null, RESPONSE.OK);
                        });
                      }       
                    });
                  }else{
                    callback(null, RESPONSE.NOT_FOUND);
                  }
                }
              });

            };
  NewsletterUnsubscribeFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref NewsletterUnsubscribeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref NewsletterApi
            - "/*"

            
  NewsletterDailyEventSchedulerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: NewsletterDailyEventSchedulerFunction
      Runtime: nodejs6.10
      Role: !GetAtt NewsletterExecutionRole.Arn
      Timeout: 5
      MemorySize: 128
      Handler: index.handler
      Code:
        ZipFile: >

            'use strict';

            var https = require("https");
            var aws = require('aws-sdk');
            var dynamoDb = new aws.DynamoDB();
            var sns = new aws.SNS();
             
            module.exports.handler = (event, context, callback) => {
              var options = {
              host: 'api.chucknorris.io',
              path: '/jokes/random',
              method : 'GET'

            };

            const RESPONSE = {
              OK : {
                status : 200,
                message: "Emails sent successfully to subscribers!!!",
              },
              ERROR : {
                status : 400,
                message: "Something went wrong. Please try again."
              }
            };


            var req = https.request(options, function(res) {
                res.setEncoding('utf-8');

                var responseString = '';

                res.on('data', function(data) {
                  responseString += data;
                });

                res.on('end', function() {
                  console.log(responseString);
                  var responseObject = JSON.parse(responseString);
                  console.log(responseObject.value);
                  send_email(responseObject.value, callback);
                });
              });

              //req.write(dataString);
              req.end();
              
              function send_email(messageBody, callback){
               
                const params = {
                  TableName: "EmailSubscriptions",
                  
                };
                
                const done = (err, result) => function(){
                   if(err) console.log(err)
                   if(result) console.log(result)
                 }
                 
                 var emails= [];
                 
                dynamoDb.scan(params, (error, data) => {
                // handle potential errors
                if (error) {
                  console.log("error reading data from table")
                  callback(null, RESPONSE.Error);
                }
                console.log(data.Items.length);
                  for (var i in data.Items) {
                    i = data.Items[i];
                    console.log(i.email.S);
                    
                    emails.push(i.email.S);
                    
                  }
                  
                  aws.config.update({
                      resources : {
                        Resources:{
                          MailQueue:{
                            Properties:{
                              Subscription:{
                                Endpoint: emails
                              }
                            }
                          }
                        }
                      }
                      
                    })
                    
                    sns.publish({
                        Message: messageBody,
                        Subject: "Chuck Norris Jokes!!",
                        TopicArn: "arn:aws:sns:${AWS:Region}:${AWS::AccountId}:${AWS:SNSTopicName}"
                        
                    }, done);
                  
                  callback(null, RESPONSE.OK);
                
              });
              }
            };            
            
            
            

  NewsletterDailyEventSchedulerFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref NewsletterDailyEventSchedulerFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref NewsletterApi
            - "/*"

  NewsletterEvent:
    Type: AWS::Events::Rule
    Properties:

        ScheduleExpression: cron(0 10 * * ? *)
        Targets:
        - Id: NewsletterDailyEventSchedulerTarget
          Arn:
            Fn::GetAtt:
            - NewsletterDailyEventSchedulerFunction
            - Arn
          
  NewsletterEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - NewsletterDailyEventSchedulerFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - NewsletterEvent
        - Arn  
            
            
  NewsletterApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: NewsletterSubscriptions
      Body:
        swagger: 2.0
        info:
          version: 1.0.0
          title: NewsletterSubscriptions
        paths:
          /subscribe:
            post:
              description: Requests a new subscription
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                uri: 
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt NewsLetterSubscriptionFunction.Arn
                      - "/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
        
          
          /unsubscribe:
            post:
              description: remove a subscription
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                uri: 
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt NewsletterUnsubscribeFunction.Arn
                      - "/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"

     

  NewsletterApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Prod deployment for wild Rydes API
      RestApiId: !Ref NewsletterApi
      StageName: prod         
Outputs:
  NewsletterApiInvokeUrl:
    Description: URL for the deployed wild rydes API
    Value:
      Fn::Join:
        - ""
        - - "https://"
          - !Ref NewsletterApi
          - ".execute-api."
          - !Ref AWS::Region
          - ".amazonaws.com/prod"
    Export:
      Name: NewsletterApiUrl